name: Auto Multi-Site Scheduler

on:
  schedule:
    - cron: "0 5 * * *"   # 北京时间13:00 (UTC 5:00) - 网站1
    - cron: "10 5 * * *"  # 北京时间13:10 (UTC 5:10) - 网站2
  workflow_dispatch:      # 支持手动触发调试

env:
  DIFY_TOKENS: ${{ secrets.DIFY_TOKENS }}           # 分号分隔的token: token1;token2
  DIFY_BASE_URL: ${{ secrets.DIFY_BASE_URL || 'https://api.dify.ai' }}
  DIFY_SITES_CONFI: ${{ secrets.DIFY_SITES_CONFI }} # 必须是JSON数组: [{}, {}]

jobs:
  Run-Dify-Workflows:
    runs-on: ubuntu-latest
    steps:
      - name: 检出仓库代码
        uses: actions/checkout@v4

      - name: 安装Node.js环境
        run: |
          sudo apt update -y
          sudo apt install -y nodejs npm
          npm install -g yarn
          echo "Node.js版本: $(node -v)"

      - name: 解析并匹配并验证格式
        id: parse-config
        run: |
          CURRENT_CRON="${{ github.event.schedule || 'manual' }}"
          echo "当前触发的定时规则: $CURRENT_CRON"

          # 1. 验证是否为JSON数组（核心修正）
          if ! echo "$DIFY_SITES_CONFI" | jq -e 'type == "array"' > /dev/null 2>&1; then
            echo "❌ DIFY_SITES_CONFI必须是JSON数组（用[]包裹），当前格式错误"
            echo "错误内容预览: $(echo "$DIFY_SITES_CONFI" | cut -c 1-100)"
            exit 1
          fi

          # 2. 验证数组不为空
          SITE_COUNT=$(echo "$DIFY_SITES_CONFI" | jq '. | length')
          if [ "$SITE_COUNT" -eq 0 ]; then
            echo "❌ DIFY_SITES_CONFI数组为空，请至少配置一个网站"
            exit 1
          fi

          # 3. 查找匹配的网站配置
          MATCHED_CONFIG=$(echo "$DIFY_SITES_CONFI" | jq -c --arg cron "$CURRENT_CRON" '.[] | select(.cron == $cron)')
          
          if [ -z "$MATCHED_CONFIG" ] || [ "$MATCHED_CONFIG" = "null" ]; then
            echo "❌ 未找到与当前cron匹配的配置: $CURRENT_CRON"
            echo "可用的cron配置: $(echo "$DIFY_SITES_CONFI" | jq -r '.[] | .cron')"
            exit 1
          fi

          # 4. 提取配置参数
          SITE_NAME=$(echo "$MATCHED_CONFIG" | jq -r '.name // "未命名网站"')
          WORKFLOW_ID=$(echo "$MATCHED_CONFIG" | jq -r '.workflow_id')
          INPUTS=$(echo "$MATCHED_CONFIG" | jq -c '.inputs')
          TOKEN_INDEX=$(echo "$DIFY_SITES_CONFI" | jq -r --arg cron "$CURRENT_CRON" 'index( .[] | select(.cron == $cron) )')

          # 5. 验证必要参数
          if [ -z "$WORKFLOW_ID" ] || [ "$WORKFLOW_ID" = "null" ]; then
            echo "❌ 工作流ID(workflow_id)不能为空"
            exit 1
          fi

          echo "::set-output name=site_name::$SITE_NAME"
          echo "::set-output name=workflow_id::$WORKFLOW_ID"
          echo "::set-output name=inputs::$INPUTS"
          echo "::set-output name=token_index::$TOKEN_INDEX"
          echo "✅ 匹配到网站: $SITE_NAME（索引: $TOKEN_INDEX）"

      - name: 获取访问令牌
        id: get-token
        run: |
          IFS=';' read -ra TOKEN_ARRAY <<< "$DIFY_TOKENS"
          TOKEN_INDEX=${{ steps.parse-config.outputs.token_index }}
          CURRENT_TOKEN=${TOKEN_ARRAY[$TOKEN_INDEX]}
          
          if [ -z "$CURRENT_TOKEN" ]; then
            echo "❌ 未找到索引为$TOKEN_INDEX的令牌，请检查DIFY_TOKENS配置"
            exit 1
          fi
          
          echo "::set-output name=token::$CURRENT_TOKEN"

      - name: 触发Dify工作流
        run: |
          WORKFLOW_ID=${{ steps.parse-config.outputs.workflow_id }}
          INPUTS=${{ steps.parse-config.outputs.inputs }}
          TOKEN=${{ steps.get-token.outputs.token }}
          API_URL="${DIFY_BASE_URL}/v1/workflows/trigger"
          
          # 构造请求体
          PAYLOAD=$(jq -n \
            --arg wf_id "$WORKFLOW_ID" \
            --argjson inputs "$INPUTS" \
            '{ "inputs": $inputs, "response_mode": "blocking" }')
          
          # 执行API调用
          echo "调用Dify API: $API_URL"
          RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST "$API_URL" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TOKEN" \
            -d "$PAYLOAD")
          
          # 解析响应
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1 | cut -d':' -f2)
          RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)
          
          if [ "$HTTP_STATUS" -ne 200 ] || ! echo "$RESPONSE_BODY" | jq -e '.success == true' > /dev/null; then
            echo "❌ 工作流触发失败"
            echo "HTTP状态: $HTTP_STATUS"
            echo "响应内容: $RESPONSE_BODY"
            exit 1
          fi
          
          echo "✅ 工作流触发成功: $WORKFLOW_ID"
